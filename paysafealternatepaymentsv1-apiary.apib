FORMAT: 1A
HOST: https://api.paysafe.com/alternatepayments/v1/

# Paysafe Alternate Payments API

The Paysafe Alternate Payments API allows you to collect payments from your customers using a
variety of methods.

Request and response payloads are formatted as JSON.

# Release Notes

|API Version    |Release      |Patch Date            |Details|
|---            |---          |---                   |---|
|v1             |1.2          |2017-03-01            |- Added support for authorization, settlement|
|               |             |                      |- Support returns on settlement|
|               |             |                      |- Ability to refund a settlement|
|               |             |                      |- Added Payolution|
|v1             |1.1          |2016-12-15            |- Added support for Boku, Giropay|
|v1             |1.0          |2016-08-01            |- Initial release with support for iDeal, Sofort|



# Technical Introduction
This section provides a technical introduction to the Paysafe Alternate Payments API. 

## API Endpoints

The Paysafe Alternate Payments API is available in the Test environment for integration testing purposes. 
To switch between the Test and the live Production systems you  need only to change the endpoint URI and the 
credentials.

The following endpoints form the basis of a resource URI:

    Test endpoint - https://api.test.paysafe.com/alternatepayments/v1/

    Production endpoint - https://api.paysafe.com/alternatepayments/v1/

Because the Test environment is completely isolated, any changes you perform on your Test accounts configuration
(such as secure IP registration, APP registration, etc.) may have to be repeated in your Production account.


## Versioning

The API version will influence the request/response object structure as well as the functionality that is available through the API. A new version of the API will  be introduced only if we roll out a backwards-incompatible change that may impact your existing integrations.  As your API version can be maintained through the merchant portal, you can manage when to upgrade to the latest version, helping ensure your integration is not disrupted as new functionality becomes available.

### Major Version

The major version \(i.e., /v1/ \) represents a major technology shift between versions of the API. Changes in the 
major version are reserved for large-scale changes to the API that fundamentally change integration requirements
from the previous version.  Modified business domain models, re-design of functional flows, or change in API 
resource patterns are all considered major changes.  Changes to a major version are rare and typically require 
an extended deprecation cycle \(~2 years\) from prior versions to allow all consumers of the API to adapt.

> Your integration should take the following backwards-compatible changes into consideration so as not to break when additional fields are added to the API.

**What is considered a backwards-compatible change?**

* Adding API resources or adding new properties to existing API resources
* Modification to the order of parameters or JSON object elements
* Adding optional request parameters to API methods
* Adding webhook event types

**What is considered a backwards-incompatible change?**

* Removal of an API resource
* Removal of an API resources object attribute
* Changes to required parameter/JSON object elements
* Removal of previously supported API call

***

## Authentication 

In order for you to use the Paysafe REST API, Paysafe must first set you up on their system
and provide you with an API key. Your API key looks something like this:

> Key Username = MerchantXYZ<br/>
> Key Password = B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

Note this is not the same as your Merchant Back Office username and password.
The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:
 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

`Authorization: Basic TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=`

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

**Note:** Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.


## Pagination

API calls that return multiple resources will wrap the response as a named JSON array.  For example, a collection of "payment" objects would
be returned as "payments". By default, 10 items at a time will be returned and you can navigate to the next set of resources using the 
supplied HATEOAS links.  List responses will also include a meta data section that will identify the number of records included in the collection,
the number of records per page (limit), and the current page number.
<br/><br/>
For example, if a request to look up payments identifies that there are 134 payments and you have set your limit to 15, the first 15 items will be returned with navigation links to provide the next 15 items in the list. If you navigate to the next page using the provided HATEOAS link, you will then retrieve items 16-30 with a new navigation link provided to return to the previous page, as well as a link to continue to the next page of items.

> _You can change the default list page size by defining a **limit** parameter value._

|Parameter Name |Description|
|---            |---|
|limit          |The number of records to be returned per page. Default = 10, Max = 100|
|offset         |Identifies your location within the list and allows you to fetch the next set of resources|
|startDate      |This is the start date in UTC.|
|endDate        |This is the end date in UTC.|

Sample Response with List Data

```
{
    "meta": {
        "numberOfRecords": 77,
        "limit": 10,
        "page": 1d 
    },
    "payments": [{
        "id": "044e3915-b612-40c7-b652-283bb288521f",
        "merchantRefNum": "xyz",
        "amount": 100,
        "currencyCode": "EUR",
        "paymentType": "IDEAL",
        "profile": {
            "firstName": "Stan",
            "lastName": "Smith",    
            "email": "stan.smith@fox.com",
            "ip": "100.0.0.1"   
        },
        "ideal": {
            "descriptor": "mydescriptor",
            "sepa": {
                "bankName": "ING",
                "country": "NL",
                "iban": "DE89370400440532013000",
                "accountHolderName": "John Doe"
            }
        },
        "returnLinks": [{
            "rel": "default",
            "href": "http://yoursite.com/"
        }],
        "liveMode": true,
        "txnTime": "2016-05-05T20:34:06Z",
        "status": "INITIATED",
        "gatewayResponse": {
            "code": "000.200.000",
            "description": "transaction pending",
            "paymentType": "DB"
        },
        "links": [{
            "rel": "self",
            "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1000203713/payments/9769f140-0bd2-4fe7-b79b-338ccf8433fc"
        }]
    }],
    "links": [{
        "rel": "next",
        "href": "https://api.paysafe.com/ alternatepayments/v1/accounts/1000203713/payments?merchantRefNum=xyz&limit=10&offset=10&startDate=2016-06-06T19:04:43Z&endDate=2016-07-06T19:04:43Z"
    }, {
        "rel": "self",
        "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1000203713/payments?merchantRefNum=xyz&limit=10&offset=0&startDate=2016-06-06T19:04:43Z&endDate=2016-07-06T19:04:43Z"
    }]
}
```

## Resource Expansion

Resource expansion can be compared to eager loading in the database realm. It offers a way to load a specific resource as well as other resources related to it. You are encouraged to use resource expansion when you know you are going to need the extra information. This will reduce the number of API calls as well as the amount of traffic to and from your server. You should avoid resource expansion when you want to reduce the amount of information returned or if you are unsure if you will need the additional resource object.
<br/><br/>
By adding an **expand** query parameter to the query you are effectively telling the server to include the details for the reference object in-line.  Any time you encounter an object that contains an "_expandable" section, you will know that the resources
identified are expandable. Passing that resource name as part of your **expand** parameter list will automatically include the associated resource details in your response.
<br/><br/>

For resources that have multiple expandable children, you can specify which resources to expand in a comma-separated list. <br />
For example, <strong>?expand=resource1,resource2</strong>

> Resource Expansion is available only when a single resource is involved. When you look up resources that could return collections of 
> results, the **_expandable** option will not be present. (I.e., if you query for a specific subscription, then **_expandable** will be available 
> for related resources such as the customer profile and associated plan for the subscription).  When a collection of related resources 
> relates to the particular resource you are looking at, a HATEOAS link will be provided instead. A good example of this would be a
> plan and its related subscriptions.  

<br/>
Below is a sample account lookup. By default the events resource is not expanded and instead includes a 
reference link that would provide the relevant details. If you would rather have the full account object returned, 
then add the **'expand=events'** parameter to your request and you will see the second events returned in-line.
<br/>

*Result without resource expansion*

```
GET /alternatepayments/admin/v1/accounts/987001112
{
    "id": "987001112", 
    "processorId": "b76786b1-4dfa-4b56-b707-976e47075a61",
    "processorCode": "PAYON",
    "paymentType": "IDEAL",
    "currencyCode": "EUR",
    "status": "ENABLED",
    "creationTime": "2016-04-05T15:17:57Z",
    "lastModificationTime": "2016-04-06T15:24:17Z",
    "allowTestTransaction": false,
    "_expandable": {
        "events": "https://api.paysafe.com/alternatepayments/admin/v1/accounts/987001112/events"
    },        
    "links": [{
       "rel": "self",
       "href": "https://api.paysafe.com/alternatepayments/admin/v1/accounts/987001112"
    }]
}
```

*Result with events expanded*

```
GET /alternatepayments/admin/v1/accounts/987001112?expand=events
{
    "id": "987001112", 
    "processorId": "b76786b1-4dfa-4b56-b707-976e47075a61",
    "processorCode": "PAYON",
    "paymentType": "IDEAL",
    "currencyCode": "EUR",
    "status": "ENABLED",
    "creationTime": "2016-04-05T15:17:57Z",
    "lastModificationTime": "2016-04-06T15:24:17Z",
    "allowTestTransaction": false,
    "events": [{
           "id": "deadbeef-aec8-41a5-94d7-446bc3999426",
           "type": "ap_auths_completed"
    }, {
           "id": "6ddbc05a-ff40-4dc1-b2d3-f200934dfdde",
           "type": "ap_auths_failed"
    }, {
           "id": "6ddbc05a-ff40-4dc1-b2d3-f20091234567",
           "type": "ap_refunds_complete"
    }, {
           "id": "12345eef-aec8-41a5-94d7-446bc3999426",
           "type": "ap_refunds_complete"
    }],
    "_expandable": {
        "events": "https://api.paysafe.com/alternatepayments/admin/v1/accounts/987001112/events"
    },        
    "links": [{
       "rel": "self",
       "href": "https://api.paysafe.com/alternatepayments/admin/v1/accounts/987001112?expand=events"
    }]
}
```

## Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |


## HTTP Responses

HTTP response codes are used to indicate the status of a request.

**HTTP Status Code Summary**

|HTTP Response Code Category|Description|
|---|---|
|1xx: Informational|Communicates transfer protocol–level information|
|2xx: Success|Indicates that the client’s request was accepted|
|3xx: Redirection|Indicates that the client must take some additional action in order to complete the request|
|4xx: Client Error|Indicates that the client has made an error with the request|
|5xx: Server Error|Indicates that an error occurred on the server side|

**Common HTTP Response Status Codes**

|HTTP Status Code|Description|
|---|---|
|200 OK|Everything worked as expected|
|201 CREATED|The request was successful. Paysafe created a new resource and the response body contains the representation.|
|202 ACCEPTED|This indicates that the client’s request will be handled asynchronously. It tells the client that the request appears valid, but it still may have problems once it is processed.|
|204 NO CONTENT|This is usually returned in response to a PUT, POST, or DELETE request, when the REST API declines to send back any status message or representation in the body of the response message.|
|304 NOT MODIFIED|The client's cached version of the representation is still up to date.|
|400 BAD REQUEST|This often indicates that a required parameter is missing or that a parameter is invalid. This is a generic client-side error status, used when no other 4xx error code is appropriate.|
|401 UNAUTHORIZED|This indicates that the client tried to operate on a protected resource without providing the proper authorization. They may have provided the wrong credentials or none at all.|
|402 PAYMENT REQUIRED|The parameters were valid but the request failed.|
|404 NOT FOUND|The requested resource does not exist.|
|405 METHOD NOT ALLOWED|The client tried to POST or PUT to a resource that would not accept it.|
|415 UNSUPPORTED MEDIA TYPE|The request is in a format not supported by the requested resource for the requested method.|
|429 TOO MANY REQUESTS|The application is sending too many simultaneous requests.|
|500 INTERNAL SERVER ERROR|An error occurred with an internal server.|
|502 EXTERNAL SERVER ERROR|We received an invalid response from the upstream gateway in attempting to fulfill the request.|


## Errors

To ease integration and support for developers 
integrating to our APIs, the error messages that are returned should be verbose enough to correct the problem.  

The error structure contains a code as well as a human readable message. 
Additionally, the application error code will be returned in the header as *x-application-error-code* 
so it can be easily used by an application without parsing the body.
<br/>

**Error Attributes**

|Element            |Type                |Description|
|---                |---                 |---|
|error.code         |String              |This is the error code.|
|error.message      |String              |This is a description of the error.|
|error.details      |Array of String     |*if applicable* This is a collection of detailed descriptions.|
|error.fieldErrors  |Array of fieldError |*if applicable* This is a list of fields that have problems.|
|error.links        |Array of link       |*if applicable* Links to the error documentation.|
|id                 |String              |*if applicable* This is the is the unique identifier for the related resource.|
|merchantRefNum     |String              |*if applicable* This is the identifier provided by the merchant for a transaction.|
|riskReasonCode     |String              |*if applicable* This is the associated risk reason.|
|links              |Array of link       |*if applicable* The link to the related resource.|

**Error message example with details**

```
Status-Code: 402

x-application-status-code: ALTERNATIVE-PAYMENTS-GATEWAY-6 
x-application-error-code: ALTERNATIVE-PAYMENTS-GATEWAY-6
x-application-error-message: Bad Request
x-application-error-details: Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value at  [line: 2, column: 61]

{
    "error": {
        "code": "5023",
        "message": "Bad Request",
        "details": {
            "Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value at  [line: 2, column: 61]"
        }
    }
}
```
 
**Error message example with field errors**

```
Status-Code: 400

x-application-status-code: 5068
x-application-error-code: 5068
x-application-error-message: Field Error(s)
x-application-error-details: Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected.

{
    "error": {
        "code": 5068,
        "message": "Field Error(s)",
        "details": [
            "Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected."
        ],        
        "fieldErrors": [{
            "field": "recipientEmail",
            "error": "john@hi@you.c.c.c.c is not a valid e-mail address."
        }, {
            "field": "transaction.amount",
            "error": "A transaction amount is required."
        }, {
            "field": "transaction.currency",
            "error": "Currency with value [USD] exceeds the maximum size of [3]."
        }]
    }
}
```


These are the error codes common to all subsystems

|HTTP Status   |Error Code     |Message                                 |Details|
|---           |---            |---                                     |---|
|400           |5001           |Invalid currency                        |The submitted currency code is invalid or your account does not support this currency.|
|              |5005           |Unsupported operation                   |You submitted an an invalid or unsupported operation type with your request.|
|              |5010           |Invalid country                         |The submitted country code is invalid.|
|              |5016           |Account not found                       |The account you provided cannot be found.|
|              |5017           |Account disabled                        |The account you provided is disabled.|
|              |5023           |Bad request                             |The request is not parseable.|
|              |5042           |Invalid merchant reference              |This error usually indicates that a transaction was attempted with the merchant reference field missing. This value is mandatory and must be included with your request.|
|              |5068           |Field error(s)                          |Either you submitted a request that is missing a mandatory  field or the value of a field does not match the format expected.|
|              |5082           |Mode not permitted                      |The request was sent in a mode that is not permitted. For example, a Live refund request was made on a Test authorization request.|
|              |5283           |Duplicate merchant reference            |The provided reference has already been used for another request.|
|401           |5275           |Authentication credentials expired      |The authentication credentials provided with the request have expired.|
|              |5276           |Authentication credentials disabled     |The authentication credentials provided with the request provided have been disabled.|
|              |5277           |Authentication credentials locked       |The authentication credentials provided with the request have been locked due to multiple authentication failures.|
|              |5278           |Cannot authenticate                     |The authentication credentials provided with the request were not accepted for an unknown reason.| 
|              |5279           |Authentication credentials are invalid  |The authentication credentials are invalid.|
|              |5280           |Authentication credentials not provided |The required authentication credentials were not provided.|
|403           |5270           |Unauthorized access                     |The credentials provided with the request do not have permission to access the requested data.|
|404           |5269           |Entity not found                        |The ID\(s\) specified in the URL do not correspond to the values in the system.|
|              |5273           |URI not found                           |Your client reached our application but we were unable to service your request due to an invalid URL.|
|405           |5281           |Method not supported                    |The request uses an action (e.g., GET, POST, or PUT) that is not supported by the resource.|
|406           |5271           |Unsupported 'Accept' header             |You requested a response in the 'Accept' header that is in an unsupported format.|
|415           |5272           |Unsupported 'Content-Type'              |The 'Content-Type' you specified in request header was submitted in an unsupported format.|
|429           |1200           |API call rate exceeded                  |The API call has been denied as it has exceeded the permissible call rate limit.|
|500           |1000           |Internal error                          |An internal error occurred.|
|502           |1001           |External gateway error                  |An external error occurred.|

These errors are specific to the Alternate Payments API.

|HTTP Status   |Error Code                    |Message                                 |Details|                                 
|---           |---                           |---                                     |---|
|402           |ALTERNATE-PAYMENTS-GATEWAY-1  |Transaction cancelled at the gateway    |The transaction was cancelled at the gateway.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-4  |Transaction declined by the gateway     |The transaction declined by the gateway. |
|402           |ALTERNATE-PAYMENTS-GATEWAY-5  |Incomplete transaction                  |The requested operation can only be executed on a completed transaction.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-6  |Over refund                             |The total refund amount cannot exceed the original payment amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-7  |Payment expired                         |The payment has expired.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-8  |Over settlement                         |The total settlement amount cannot exceed the authorized (payment) amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-9  |Risk gateway error                      |A risk issue was reported by the gateway.|
|502           |ALTERNATE-PAYMENTS-GATEWAY-10 |Payment type temporarily unavailable    |The gateway is temporarily unavailable due to system maintenance activities.|


## HATEOAS

The Alternate Payments API uses a RESTful endpoint structure and relies on HTTP verbs (GET, PUT, POST, DELETE)
to determine what action you are attempting to perform on a specific resource.

Each API call response includes an array of HATEOAS (Hypermedia as the Engine of Application State) links. 
These links can be used to integrate subsequent flows and typically they will provide you information as to
what you can do next.

By using these links, you no longer need to hardcode your integration to call specific endpoint URLs to utilize
our API, but rather can use the returned URL for the specific purpose as defined by the 'rel' definition.

#### HATEOAS Link Structure

|Element  |Description|
|---      |---|
|rel      |Link relation that describes how this link relates to the previous call. Examples include self (get details of the current call), parent_payment (get details of the parent payment), or a related call such as to execute a refund on the payment.|
|href     |URL of the related HATEOAS link you can use for subsequent calls.|


Below are sample HATEOAS links from an API response that returns a collection of payments. Links
are provided to navigate through the set of resources in the collection.
```
"links": [{
    "rel": "self",
    "href": "https://api.paysafe.com/alternatepayments/v1/payments/234243242?limit=10&offset=10"
},  {
    "rel": "prev",
    "href": "https://api.paysafe.com/alternatepayments/v1/payments/234243242?limit=10&offset=0"

}, {
    "rel": "next",
    "href": "https://api.paysafe.com/alternatepayments/v1/payments/234243242?limit=10&offset=20"
}]

```


# Payments [/payments]

The payment resource represents a payment authorization.  When requesting a payment, you can choose to have the request 
include automatic settlement (authWithSettle = true), alternatively, you can choose delayed settlement (authWithSettle = false). 
A Payment and Settlement work in conjunction and a completed transaction will always have both resources created.  For cases
when authWithSettle is true, then the corresponding settlement resource will have the same resource identifier because it was
created from the same request.

The ability to have delayed settlement will depend on the payment option you are attempting.  Some payment types may only support 
one or the other, and some may support both (for example Paypal). 

> Note that each payment type and currency is associated with its own distinct account.  
> Please contact Paysafe Merchant Support to enable additional payment types and or currencies.

## Create Payment [POST /accounts/{accountId}/payments]

Your account is set up to allow payments for a specific payment method and currency. Please contact Paysafe Merchant Support to enable additional options for your account.

You can submit a payment request using local payment methods that your customers are familiar with.

> In addition to specifying *paymentType* as part of your API request, if the desired payment method also requires additional attributes, 
> these should be passed as a nested object in the root of your payment request.  
> <br/>
> For example, an iDeal payment requires the following attributes are included in your request:
>
>
>```
>{
>    "paymentType": "IDEAL",
>    "ideal": {
>       "sepa": {
>           "bankName": "ing",
>           "country": "NL"
>       }
>    }
>    ... other payment attributes here ...
>|
>```

<u>Payment Specific Attributes</U>

![iDeal](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/payment_icons/ideal.png)
<code>
<b>ideal.descriptor</b> - Descriptor to display on customers statement <i>(max 16 alphanumeric)</i><br/>
<b>ideal.sepa.bankName</b> - <i>Required</i> The customers bank. <i>Options (abn\_amro, rabobank, bunq, ing, triodos, asn\_bank, sns\bank, regiobank, van_lanshot, knab)</i><br/>
<b>ideal.sepa.country</b> - <i>Required</i> The customers bank country<br/>
<b>ideal.sepa.iban</b> - The International Bank Account Number (IBAN) of the account<br/>
<b>ideal.sepa.bic</b> - The Bank Identifier Code (BIC) of the account<br/>
<b>ideal.sepa.accountHolderName</b> - The account holders name<br/>
</code>

![Sofort](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/payment_icons/sofort.png)
<code>
<b>sofort.descriptor</b> - Descriptor to display on customers statement<br/>
<b>sofort.sepa.bankName</b> - The customers bank<br/>
<b>sofort.sepa.country</b> - The customers bank country<br/>
<b>sofort.sepa.iban</b> - The International Bank Account Number (IBAN) of the account<br/>
<b>sofort.sepa.bic</b> - The Bank Identifier Code (BIC) of the account<br/>
<b>sofort.sepa.accountHolderName</b> - The account holders name<br/>
</code>

![Giropay](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/payment_icons/giropay.png) 
<code>
<b>giropay.descriptor</b> - <i>Required (max 27 alphanumeric)</i><br/>
<b>giropay.sepa.iban</b> - The International Bank Account Number (IBAN) of the account<br/>
<b>giropay.sepa.bic</b> - The Bank Identifier Code (BIC) of the account<br/>
<b>giropay.sepa.accountHolderName</b> - The account holders name</br>
</code>

![Boku](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/payment_icons/boku.png)
<code>
<b>boku.descriptor</b> - <i>Required (max 20 char)</i> Descriptor to display on customers statement<br/>
<b>boku.customerCountry</b> - <i>Required</i> The country of registration for the customers mobile phone<br/>
<b>boku.customerMobilePhone</b> - <i>Required</i> The customers mobile phone number<br/>
</code>

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.

+ Attributes (Payment Request Base)
    + Include paymentType            
    + Include ideal
    + Include sofort
    + Include giropay
    + Include boku    

+ Request Create iDeal payment (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
              "merchantRefNum": "0b0ceaa3-42ad-442d-b85b-c3b70f24835d",
              "dupCheck": true,
              "amount": 100,
              "currencyCode": "EUR",
              "descriptor": "Test description",
              "profile": {
                "firstName": "Stan",
                "lastName": "Smith",
                "email": "stan.smith@fox.com",
                "ip": "127.0.0.1"
              },
              "billingAddress": {
                "street1": "Street line 1",
                "street2": "Street line 2",
                "city": "Calgary",
                "state": "AB",
                "country": "CA",
                "zip": "T3H3L3"
              },
              "returnLinks": [
                {
                  "rel": "default",
                  "href": "https://mysite.com/return"
                }
              ],
              "paymentType": "IDEAL",
              "ideal": {
                "sepa": {
                  "bankName": "ING",
                  "country": "NL"
                }
              }
            }

+ Response 201 (application/json)

    + Body

            {
              "id": "25f6dadf-176a-415f-95c9-6ff39ff697ba",
              "merchantRefNum": "b0ceaa3-42ad-442d-b85b-c3b70f24835d",
              "amount": 100,
              "currencyCode": "EUR",
              "profile": {
                "firstName": "Stan",
                "lastName": "Smith",
                "email": "stan.smith@fox.com",
                "ip": "127.0.0.1"
              },
              "billingAddress": {
                "street1": "Street line 1",
                "street2": "Street line 2",
                "city": "Calgary",
                "state": "AB",
                "country": "CA",
                "zip": "T3H3L3"
              },
              "returnLinks": [
                {
                  "rel": "default",
                  "href": "https://mysite.com/return"
                }
              ],
              "descriptor": "test descriptor",
              "liveMode": "false",
              "txnTime": "2015-12-11T16:33:49Z",
              "status": "INITIATED",
              "gatewayResponse": {
                "code": "000.100.110",
                "description": "Request successfully processed in 'Merchant in Integrator Test Mode'",
                "paymentType": "RF"
              },
              "paymentType": "IDEAL",
              "ideal": {
                "sepa": {
                  "bankName": "ing",
                  "country": "NL"
                }
              },
              "links": [
                {
                  "rel": "self",
                  "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21\""
                },
                {
                  "rel": "redirect_payment",
                  "href": "https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21/redirect?token=eyJhbGciOiJIUzI1NiJ9.eyJhdGQiOiI5Y2M1Mzc2YS01N2I4LTQzNTEtYjQyYy0zYTAyYTEwNDBiMjEiLCJhY2QiOiIxNDY1MzMwMTAyIiwiZXhwIjoxNDY1NDAwNjg2fQ.EzLIFiXt40PLVuX7SOHRkZrNX7Nn0_97ZJsGx1yKRrc"
                }
              ]
            }



## Void a payment authorization [POST /accounts/{accountId}/payments/{paymentId}/voidauths]

An payment void allows you to void (reverse) all or part of an existing authorization, provided no settlements 
(either full or partial) have been processed against that payment.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.
            
+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  

+ Response 200 (application/json)

        
## Lookup payment by id [GET /accounts/{accountId}/payments/{paymentId}]

Returns an individual payment detail.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  

+ Response 200 (application/json)

    + Attributes
        + paymentType: `SOFORT` (string) - This is the type of payment.
        + Include Payment Response Base
        + Include payonGatewayResponse        
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/9cc5376a-57b8-4351-b42c-3a02a1040b21"`


## List payments by merchantRefNum [GET /accounts/{accountId}/payments/?merchantRefNum={merchantRefNum}]

Returns a collection of payment details, as *merchantRefNum* could be used for multiple requests when *dupCheck*
is disabled.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + merchantRefNum (string, required, `43903ab232`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY  

+ Response 200 (application/json)

    + Attributes
        + payments (array)
            + paymentType: `GIROPAY` (string) - This is the type of payment.
            + (Payment Response Base)
            + (payonGatewayResponse)
        + links (array) - This is an array of related links. 
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/?merchantRefNum=ABC123`
            + (object)
                + rel: `next`
                + href: `https://api.paysafe.com/alternatepayments/v1/accounts/1465330102/payments/?merchantRefNum=merchantRef_2014_03_10_01&limit=10&offset=10&startDate=2014-03-10T13:01:50Z&endDate=2014-03-20T13:06:50Z`

## Refund a payment [POST /accounts/{accountId}/payments/{paymentId}/refunds]

You can issue a refund request against a payment that is already completed.  It is possible to issue either a full or a 
partial refund (or series of refunds) against the intial payment, however the combined refund amount cannot
exceed the original settlement amount.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Attributes
    + Include Refund Request
     
+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 201 (application/json)


## List settlements [GET /accounts/{accountId}/payment/{paymentId}/settlements]

Retrieve a list of any settlements associated to this payment.

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + paymentId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)


    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "settlements": [
                    {
                        "id": "670c8464-f7bf-45da-ba53-972abf7701e4",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "liveMode": true,
                        "txnTime": "2017-02-10T20:17:51Z",
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements/670c8464-f7bf-45da-ba53-972abf7701e4"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4/settlements?limit=10&offset=0&startDate=2017-01-11T20:29:46Z&endDate=2017-02-10T20:29:47Z"
                    }
                ]
            }
            
            

## List returns [GET /accounts/{accountId}/payment/{paymentId}/returns]

Retrieve a list of any returns associated to this payment.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)


# Settlements [/settlements]

A settlement allows you to settle an amount that was previously authorized for a customer.  It is the process 
of capturing funds from a previous authorization request.  If you specified delayed (manual) settlement
on your payment request, then you must manually POST the settlement against the payment.  You can settle all or 
part of an existing payment authorization.

## Create a settlement [POST /accounts/{accountId}/payments/{paymentId}/settlements]

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + paymentId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

## Lookup a settlement by id [GET /accounts/{accountId}/settlements/{settlementId}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + settlementId (string, required, `670c8464-f7bf-45da-ba53-972abf7701e4`) - This is your unique settlement identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body

            {
                "id": "670c8464-f7bf-45da-ba53-972abf7701e4",
                "merchantRefNum": "1486757872",
                "amount": 400,
                "currencyCode": "EUR",
                "paymentType": "SOFORT",
                "liveMode": true,
                "txnTime": "2017-02-10T20:17:51Z",
                "status": "COMPLETED",
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements/670c8464-f7bf-45da-ba53-972abf7701e4"
                    }
                ]
            }    


## List settlements by merchantRefNum [GET /accounts/{accountId}/settlements/?merchantRefNum={merchantRefNum}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + merchantRefNum (string, required, `1486757872`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "settlements": [
                    {
                        "id": "670c8464-f7bf-45da-ba53-972abf7701e4",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "liveMode": true,
                        "txnTime": "2017-02-10T20:17:51Z",
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/settlements/670c8464-f7bf-45da-ba53-972abf7701e4"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4/settlements?limit=10&offset=0&startDate=2017-01-11T20:29:46Z&endDate=2017-02-10T20:29:47Z"
                    }
                ]
            }


## Refund a settlement [POST /accounts/{accountId}/settlements/{settlementId}/refunds]

You can issue a refund request against a completed settlement.  It is possible to issue either a full or a 
partial refund (or series of refunds against the intial settlement), hoowever the combined refund amount cannot
exceed the original settlement amount.

> NOTE: You can also issue a refund against the payment.  Choose the right method depending upon your integration needs.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + settlementId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique payment identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Attributes
        + Include Refund Request
     

+ Response 201 (application/json)

    + Attributes (Refund Response)



# Returns [/returns]

Returns transactions will be created by Paysafe if we receive a no credit notification from the service provider.  As a merchant you 
cannot create a return directly.  

> Note: Currently only Sofort supports return.

## Lookup a return [GET /accounts/{accountId}/returns/{returnId}]

+ Parameters
    + accountId (string, required, `1486757865`) - This is your unique account identifier.
    + returnId (string, required, `81294868-e69a-4410-b592-46e2ab5b5673`) - This is your unique return identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

    + Body
    
            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "returns": [
                    {
                        "id": "81294868-e69a-4410-b592-46e2ab5b5673",
                        "merchantRefNum": "1486757872",
                        "amount": 400,
                        "currencyCode": "EUR",
                        "paymentType": "SOFORT",
                        "txnTime": "2017-02-10T20:20:00Z",
                        "liveMode": true,
                        "status": "COMPLETED",
                        "links": [
                            {
                                "rel": "self",
                                "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/returns/81294868-e69a-4410-b592-46e2ab5b5673"
                            }
                        ]
                    }
                ],
                "links": [
                    {
                        "rel": "self",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4/returns?limit=10&offset=0"
                    },
                    {
                        "rel": "payments",
                        "href": "http://localhost:8011/alternatepayments/v1/accounts/1486757865/payments/670c8464-f7bf-45da-ba53-972abf7701e4"
                    }
                ]
            }    


# Return Reversals [/returnreversals]

Return reversal transactions will be automatically created by Paysafe if we receive a late credit notification after already issuing a return.

> Note: Currently only Sofort supports return reversal.

## List return reversals [GET /accounts/{accountId}/returns/{returnId}/returnreversals]

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + returnId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique return identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)
                                                

## Lookup Return Reversal [GET /accounts/{accountId}/returns/{returnId}/returnreversals/{returnReversalId}]

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + returnReversalId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique return reversal identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY


+ Response 201 (application/json)

# Refunds [/refunds]

A Refund allows you to refund back to a customer an amount that has previously been settled. You can create a refund 
against an existing payment OR settlement.

## Lookup Refund by id [GET /accounts/{accountId}/refunds/{refundId}]

Returns an individual refund detail.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + refundId (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique refund identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 200 (application/json)

    + Attributes 
    
        + Include Refund Response
        + links (array) - This is an array of related links.
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/v1/accounts/1466458515/refunds/6565bce8-9ae2-4359-bc7c-48c2e560810b`

## Lookup Refund by merchantRefNum [GET /accounts/{accountId}/refunds/?merchantRefNum={merchantRefNum}]

Returns a collection of refund details, as *merchantRefNum* could be used for multiple requests when *dupCheck* 
is disabled.

+ Parameters
    + accountId (string, required, `1234567891`) - This is your unique account identifier.
    + merchantRefNum (string, required, `25f6dadf-176a-415f-95c9-6ff39ff697ba`) - This is your unique refund identifier.

+ Request (application/json)

    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

+ Response 200 (application/json)

    + Attributes
    
        + refunds (array)
            + (Refund Response)
        + links (array) - This is an array of related links.
            + (object)
                + rel: `self`
                + href: `https://api.paysafe.com/v1/accounts/1466458515/refunds?merchantRefNum=1466458777&limit=10&offset=0&startDate=2016-05-21T22:17:47Z&endDate=2016-06-20T22:17:47Z`

# Data Structures

## Payment Request Base

+ `merchantRefNum`: `0b0ceaa3-42ad-442d-b85b-c3b70f24835d` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request unless you override and set *dupCheck* to false.
+ `dupCheck`: `true` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `amount`: `100` (number, required) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string, required) - This is the currency of the payment.
+ Include Profile Request
+ Include billingDetails
+ Include returnLinks

## Payment Response Base

+ `id`: `25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Settlements.
+ `merchantRefNum`: `b0ceaa3-42ad-442d-b85b-c3b70f24835d` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
+ `amount`: `100` (number) - This is the amount of the request, in minor units.
+ `currencyCode`: `EUR` (string) - This is the currency of the payment.
+ Include Profile Response
+ Include billingDetails
+ Include returnLinks
+ `liveMode`: `false` (string) - This indicates whether this is a Live or Test transaction.
+ `txnTime`: `2015-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
+ `status`: `INITIATED` (string) - This is the status of the transaction request.

## Profile Request 

+ `profile` (object, optional) - These are some details about the customer.
    + `firstName`: `Stan` (string, required)
    + `lastName`: `Smith` (string, required)
    + `email`: `stan.smith@fox.com` (string, required)
    + `ip`: `127.0.0.1` (string, optional)

## Profile Response 

+ `profile` (object, optional) - These are some details about the customer.
    + `firstName`: `Stan` (string)
    + `lastName`: `Smith` (string)
    + `email`: `stan.smith@fox.com` (string)
    + `ip`: `127.0.0.1` (string)

## `billingDetails`

+ `billingDetails` (object, optional) = This is the billing address of the customer.
    + `street1`: `Street line 1` (string, required)
    + `street2`: `Street line 2` (string, optional)
    + `city`: `Calgary` (string, required)
    + `state`: `AB` (string, required)
    + `country`: `CA` (string, required)
    + `zip`: `T3H3L3` (string, required)

## Refund Request

+ `merchantRefNum`: `xyz` (string, required) - This is the merchant reference number.
+ `dupCheck`: `false` (boolean, optional) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request. Default is *true*.
+ `paymentType`: `IDEAL` (string, required) - This specifies the payment type of the transaction.
+ `currencyCode`: `EUR` (string, required) - This is the currency of the payment.
+ `amount`: `100` (number, required) - This is the amount in minor units.

## Refund Response

+ `id`: `6565bce8-9ae2-4359-bc7c-48c2e560810b` (string) - This is the refund id.  *\*\*Assigned by Paysafe* 
+ `liveMode`: `true` (boolean) - This indicates whether this is a Live or Test transaction.
+ `merchantRefNum`: `xyz` (string) - This is your unique idenitfier for this request.
+ `amount`: `400` (number) - This is the amount of the refund in minor units (e.g., $50.00 USD => 5000, 50 YEN -> 50).
+ `currencyCode`: `EUR` (string) - This is the currency of the payment.
+ `paymentType`: `IDEAL` (string)
+ `txnTime`: `2016-02-24T08:39:39Z` (string) - This is the datetime of the transaction in UTC. *\*\*Assigned by Paysafe*
+ `status`: `COMPLETED` (string) - This is the current state of the transaction. *\*\*Assigned by Paysafe*
+ Include payonGatewayResponse
+ `links` (array) - This is an array of links related to the resource. 
    + ([object])
        + `rel`: `self`
        + `href`: `https://api.paysafe.com/v1/accounts/1466458515/refunds/6565bce8-9ae2-4359-bc7c-48c2e560810b`

## `returnLinks`

+ `returnLinks` (array) - This is an array of return links.
    + (object)
        + `rel`: `default` (enum, required) - The final transaction status that determines where to return the customer to. ('default' is mandatory)
            + Members
                + `default` - The default return url, will be used if specific status return url is not defined.
                + `on_pending`
                + `on_completed`
                + `on_failed`
                + `on_cancelled`
                + `on_error`
        + `href`: `https://mysite.com/return` (string, required) - The TLS secured endpoint to return the customer to.

## `paymentType`

+ `paymentType` (enum, required) - Specify the type of payment you are requesting. 
    + Members
        + `BOKU`
        + `GIROPAY`
        + `IDEAL`        
        + `SOFORT`

## `boku`

+ `boku` (object) - OPTIONAL attributes that can be passed that when making a BOKU payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.

## `bokuGatewayResponse`

+ `gatewayResponse` (object)
    + `processor`: `BOKU` (string)
    + `action`: `prepare` (string)
    + `trx-id`: `da481fcf-ac0f-4b36-b84b-7e-a5844d3f` (string)
    + `result-code`: `0`
    + `result-msg`: `Operation Successful` (string)            

## `giropay`

+ `giropay` (object) - OPTIONAL attributes that can be passed that when making a GIROPAY payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.

## `giropayGatewayResponse`

+ `gatewayResponse` (object)
    + `processor`: `GIROPAY` (string)
    + `txId`: `SIM001270` (string)
    + `returnCode`: `0`
    
## `sepa` 

+ `country`: `NL` (string)
+ `bic`: `BARCGB22XXX` (string)
+ `iban`: `AZ21NABZ00000000137010001944` (string)
+ `accountHolderName`: `Max Mustermann` (string)

## `payolutionPaymentInformation` 

+ `paymentReference`: `YTTR-WMQX-KLGW` (string)
+ `iban`: `AT611904300234573201456` (string)
+ `bic`: `BFRILI22XXX` (string)
+ `bankName`: `Musterbank` (string)
+ `accountHolderName`: `Test Merchant` (string)

## `payolutionAnalysis`

+ `key`: `PAYOLUTION_CUSTOMER_GROUP` (string)
+ `value`: `TOP` (string)

## `payolution`

+ `payolution` (object) - Parameters required for a Payolution payment request.
    + `customerID`: `maxx_muster1980` (string)
    + `sepa` (sepa)
    + `paymentInformation` (payolutionPaymentInformation)
    + `analysis` (array[payolutionAnalysis])
    
## `payonGatewayResponse`

+ `gatewayResponse` (object)
    + `code`: `000.100.110` (string)
    + `description`: `Request successfully processed in 'Merchant in Integrator Test Mode'` (string)
    + `id`: `9bcaa7f0dba44c64981881401794abby`
    + `processor`: `PAYON`
    + `paymentType`: `RF` (string)    
    
## `sofort`

+ `sofort` (object) - OPTIONAL attributes that can be passed that when making a SOFORT payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.

## `sofortGatewayResponse`

+ `gatewayResponse` (object)
    + `code`: `0` (string)
    + `description`: `Request successfully processed` (string)
    + `id`: `0000-014100-SOFRTSIM-0000`
    + `processor`: `SOFORT`
    + `paymentType`: `DB` (string)    

## `ideal`

+ `ideal` (object) - OPTIONAL attributes that can be passed that when making a IDEAL payment request. 
    + `descriptor` : `XYZ Merch #438A` (string, optional) - The descriptor that will be shown on the customers statement.
    + `sepa` (object)
        + `bankName`: `ING` (string, required)
        + `country`: `NL` (string, required)